#include <stdio.h>
#include <math.h>
#include <time.h>
#include <unistd.h>
#include <cuda_runtime_api.h>
#include <errno.h>
#include <unistd.h>

/******************************************************************************
 * The variable names and the function names of this program is same as provided by the university.
  The added variable and function are the only changes made to this program. 


 * To compile:
 *   nvcc -o linearregression_cuda linearregression_cuda.cu -lm
 * 
 * To run:
 *   ./linearregression_cuda 
 * 
 *****************************************************************************/

typedef struct point_t {
  double x;
  double y;
} point_t;

int n_data = 1000;
__device__ int d_n_data = 1000;


point_t data[] = {
 {65.11,126.40},{76.79,149.00},{76.93,162.00},{65.24,113.46},
  {78.54,145.93},{84.60,161.77},{85.60,162.58},{82.32,152.21},
  {78.17,144.80},{69.47,142.78},{82.72,156.05},{11.56,52.20},
  {66.15,122.01},{75.13,145.75},{ 8.11,36.01},{71.58,150.44},
  {23.30,70.06},{42.59,86.42},{39.11,76.86},{ 8.77,36.29},
  {83.41,152.32},{ 3.44,36.86},{72.15,126.11},{66.29,129.15},
  {28.93,92.24},{91.62,172.01},{ 0.39,40.02},{55.24,104.88},
  {44.96,90.98},{89.66,170.29},{29.39,86.66},{56.19,109.96},
  {79.43,153.15},{54.27,110.73},{ 9.28,54.91},{31.16,76.74},
  {20.00,49.29},{67.25,122.68},{95.64,182.45},{66.03,128.30},
  {36.60,94.60},{83.93,120.16},{22.67,76.02},{81.17,164.59},
  {84.70,147.15},{34.58,87.81},{ 0.26,39.25},{82.07,149.43},
  { 2.63,41.39},{ 1.74, 7.95},{70.98,133.50},{16.65,49.48},
  {27.85,61.85},{55.84,105.63},{81.77,153.60},{19.81,61.26},
  {28.19,97.35},{ 2.62,32.52},{60.42,123.43},{53.67,118.83},
  {92.67,163.43},{ 4.09,30.06},{31.35,78.55},{54.79,103.97},
  {89.15,163.38},{20.35,66.02},{28.55,88.62},{11.66,58.29},
  {89.90,154.40},{ 0.14,51.92},{ 4.75,37.69},{53.83,108.99},
  {62.17,127.68},{79.10,133.64},{24.19,68.78},{51.41,100.86},
  {44.52,92.93},{23.02,66.51},{98.60,181.12},{ 6.05,48.82},
  {62.79,147.70},{ 5.06,50.58},{85.40,155.28},{12.33,60.17},
  {49.62,118.33},{ 9.03,48.29},{45.21,88.73},{28.22,55.37},
  {91.32,165.67},{ 6.74,44.19},{46.03,93.83},{69.75,139.69},
  { 2.15,40.31},{95.82,160.20},{ 6.64,54.91},{75.25,148.74},
  {39.64,68.97},{ 5.55,66.26},{90.53,155.37},{39.95,91.42},
  {68.89,132.98},{33.52,78.37},{15.84,38.51},{72.73,139.50},
  {21.54,73.78},{ 4.64,47.34},{66.57,132.87},{27.38,71.86},
  {93.83,181.33},{75.83,161.75},{26.47,56.70},{84.23,151.43},
  { 0.43,43.29},{88.50,160.27},{66.15,129.59},{78.31,141.68},
  {36.90,101.61},{71.78,139.52},{90.37,173.79},{ 0.58,45.98},
  {67.63,131.85},{57.43,100.37},{88.43,161.15},{74.83,132.98},
  {29.31,54.66},{79.06,146.78},{54.41,120.80},{51.76,108.96},
  {11.80,65.51},{38.19,90.48},{18.40,71.77},{76.29,148.07},
  {75.30,135.15},{59.56,126.34},{32.71,86.25},{42.35,116.15},
  { 4.85,38.50},{ 3.14,50.60},{48.27,90.59},{34.96,88.02},
  {10.03,50.01},{ 5.51,40.83},{68.32,136.16},{74.87,134.02},
  { 1.56,47.50},{19.52,72.68},{ 9.10,52.12},{50.79,102.10},
  {53.11,105.38},{94.93,174.68},{16.03,44.26},{13.26,49.58},
  { 3.24,46.86},{77.38,158.65},{21.57,62.81},{41.63,89.86},
  {13.55,59.72},{25.43,71.35},{86.73,166.79},{77.15,149.52},
  {26.47,64.94},{48.65,92.62},{33.66,75.10},{25.20,63.45},
  {25.46,86.18},{70.52,147.39},{98.32,175.47},{23.09,62.68},
  {48.90,118.74},{69.07,141.45},{50.54,132.25},{55.80,119.88},
  {25.65,92.01},{54.39,112.81},{79.86,165.28},{95.98,154.86},
  {48.14,108.06},{36.33,88.43},{ 6.34,35.96},{86.04,151.77},
  {57.03,116.32},{97.95,180.12},{29.66,73.83},{12.52,35.04},
  {43.93,83.56},{33.63,78.69},{64.00,128.13},{14.49,50.14},
  {49.66,112.89},{82.54,162.20},{81.92,143.19},{28.07,78.90},
  {14.26,47.92},{23.97,63.31},{27.69,73.01},{78.13,119.54},
  {34.43,82.48},{66.13,123.89},{61.84,135.81},{17.03,57.30},
  { 5.61,52.51},{34.44,88.49},{17.81,81.52},{34.26,79.71},
  {93.17,161.29},{ 8.10,39.44},{93.51,158.23},{61.48,133.51},
  {27.22,71.93},{17.11,50.22},{27.73,81.68},{16.07,61.27},
  {63.81,122.63},{ 0.27,36.83},{62.21,120.74},{42.36,85.01},
  {60.61,143.23},{68.59,121.10},{28.48,68.27},{23.39,71.50},
  {93.40,162.60},{50.72,114.87},{24.53,80.83},{92.00,160.38},
  {79.29,175.12},{28.84,78.42},{13.79,44.14},{23.18,62.24},
  {69.07,122.23},{41.93,120.63},{62.32,125.07},{72.39,136.08},
  {41.86,92.41},{ 2.35,21.43},{56.14,133.02},{33.91,90.07},
  {13.68,76.01},{14.55,71.51},{73.79,152.07},{33.47,97.28},
  {31.12,65.68},{ 4.33,41.19},{22.94,58.10},{85.12,160.37},
  {80.26,154.39},{37.01,78.54},{ 6.94,38.10},{ 7.83,60.51},
  {42.44,90.12},{26.69,91.63},{99.36,184.47},{ 9.33,55.05},
  {16.87,63.97},{32.41,80.49},{36.34,77.15},{59.91,122.62},
  { 7.35,34.97},{99.21,183.69},{34.07,97.06},{43.85,102.96},
  {55.20,111.99},{ 3.95,41.47},{26.71,82.57},{16.69,64.61},
  {38.32,96.85},{76.67,136.21},{86.22,175.61},{35.18,71.39},
  {57.39,117.85},{72.12,139.30},{90.19,173.32},{97.26,163.25},
  {82.08,135.04},{40.69,96.78},{25.49,75.76},{83.38,149.39},
  {63.64,135.54},{90.52,166.25},{79.96,154.68},{45.70,107.42},
  {15.54,61.07},{97.10,170.63},{41.10,87.33},{35.86,74.41},
  {57.22,120.65},{16.28,64.80},{46.33,97.53},{31.84,83.82},
  {90.15,177.85},{13.39,77.75},{ 8.25,26.83},{91.74,155.44},
  {11.65,61.09},{26.30,82.75},{61.72,128.34},{76.94,152.59},
  {26.70,81.25},{ 6.11,39.57},{97.46,172.22},{13.50,43.37},
  {16.46,54.81},{44.36,84.30},{45.83,105.17},{41.47,105.60},
  {31.72,82.66},{58.79,113.04},{95.35,168.80},{27.91,73.77},
  {61.28,126.49},{ 1.18,32.24},{ 4.17,41.67},{79.08,142.98},
  { 4.80,37.58},{94.98,160.79},{37.47,80.15},{ 6.82,53.58},
  {57.54,118.51},{73.31,139.05},{91.40,166.67},{98.07,162.54},
  { 3.87,41.53},{63.71,130.41},{75.78,137.34},{56.32,122.22},
  { 8.03,63.52},{22.60,60.09},{94.56,158.12},{16.10,72.60},
  {82.22,155.28},{57.63,114.94},{55.26,118.38},{73.52,126.54},
  {59.13,123.52},{81.11,167.56},{68.73,123.16},{43.78,122.00},
  {27.48,70.82},{43.92,110.09},{ 7.04,44.70},{91.03,147.13},
  {44.55,114.71},{68.40,122.77},{ 6.31,55.15},{12.03,51.80},
  {26.62,77.09},{12.90,60.85},{41.47,115.00},{75.98,156.05},
  {62.84,118.68},{ 3.19,54.74},{74.93,132.72},{89.37,170.57},
  {57.12,114.25},{63.07,104.90},{60.20,129.41},{36.04,82.56},
  {66.43,133.16},{ 7.01,45.98},{87.68,162.25},{36.24,86.35},
  {60.38,140.39},{ 3.56,41.80},{65.74,138.56},{16.34,61.32},
  {34.00,105.97},{77.42,132.46},{61.79,135.32},{61.13,116.51},
  {90.22,159.21},{68.78,137.53},{48.35,110.41},{58.48,110.06},
  { 0.04,45.54},{87.14,152.92},{73.42,154.90},{48.73,105.35},
  {36.26,97.55},{50.34,107.46},{95.65,162.87},{11.76,50.19},
  {12.83,58.44},{ 7.59,65.35},{51.44,109.31},{15.39,65.30},
  {83.69,147.00},{75.86,139.91},{25.87,87.89},{ 0.79,40.68},
  { 4.87,62.14},{64.71,126.73},{60.94,111.46},{82.18,142.90},
  {21.67,55.08},{33.20,93.76},{11.93,64.07},{10.59,39.64},
  {20.90,63.85},{21.47,81.20},{15.02,80.95},{67.04,112.88},
  { 0.78,34.00},{24.49,77.44},{ 0.49,33.31},{70.88,138.01},
  {33.07,81.36},{74.11,139.95},{ 1.26,40.24},{26.68,81.03},
  {81.37,155.39},{89.28,163.35},{82.92,150.44},{88.94,166.64},
  {14.35,63.72},{58.92,119.69},{47.88,100.06},{73.51,145.81},
  {21.11,79.13},{33.98,87.52},{87.88,158.32},{24.47,79.36},
  {34.00,92.04},{42.25,105.99},{20.75,64.71},{65.45,131.84},
  {10.51,38.23},{36.26,87.53},{70.72,129.61},{62.87,129.51},
  {88.93,170.73},{50.72,124.30},{52.28,104.85},{ 1.38,36.72},
  {93.31,171.99},{56.94,135.14},{99.80,174.15},{ 2.74,46.10},
  {42.39,81.82},{42.07,102.65},{ 3.06,34.94},{69.46,129.37},
  {43.33,104.41},{69.47,129.06},{68.70,134.00},{95.28,179.59},
  {66.66,132.99},{14.40,70.02},{39.22,77.48},{ 5.87,32.85},
  {71.70,144.19},{69.40,140.87},{51.33,113.42},{38.58,97.94},
  {70.18,129.30},{28.53,76.70},{11.77,52.53},{16.26,69.96},
  {86.39,161.92},{14.35,60.74},{17.32,53.69},{60.10,117.59},
  {55.86,117.63},{ 9.26,58.48},{48.28,100.74},{79.81,149.90},
  {59.38,105.17},{72.31,119.55},{41.23,91.88},{70.20,136.75},
  {82.58,158.00},{72.29,130.76},{10.80,60.44},{81.60,167.47},
  {57.21,120.91},{83.97,150.98},{78.97,152.79},{78.71,146.61},
  {98.28,172.82},{39.89,87.34},{92.46,169.18},{29.94,69.32},
  {64.78,127.52},{52.32,113.01},{29.54,78.81},{46.04,97.77},
  {97.71,155.81},{90.08,172.72},{59.58,117.24},{74.61,149.80},
  {64.20,116.45},{42.14,102.85},{44.27,107.95},{97.48,174.75},
  {84.52,164.71},{19.46,51.01},{87.05,166.73},{28.47,61.63},
  { 0.59,40.82},{49.83,100.11},{25.05,62.68},{20.32,62.69},
  {56.64,126.50},{15.41,59.79},{98.36,173.55},{57.73,97.55},
  {29.88,86.10},{26.44,65.10},{92.31,174.76},{10.74,49.39},
  {88.32,163.82},{71.67,156.47},{94.40,181.01},{16.04,55.25},
  {76.78,141.43},{81.76,146.31},{81.41,144.40},{ 7.59,65.42},
  {29.83,93.19},{71.85,128.96},{17.45,45.91},{66.78,148.29},
  {87.12,149.00},{55.37,115.72},{ 8.34,69.56},{10.30,58.08},
  {26.49,79.04},{33.65,83.88},{82.84,146.92},{74.19,132.28},
  {47.38,105.49},{95.30,172.52},{ 8.60,54.66},{38.14,69.96},
  {14.06,65.00},{27.26,74.14},{31.28,82.60},{24.83,97.76},
  {53.38,101.53},{26.88,87.40},{77.79,153.42},{ 4.60,53.07},
  {36.70,76.53},{33.96,93.76},{64.04,116.47},{73.85,156.81},
  {31.88,85.18},{10.44,62.68},{41.55,99.48},{31.20,94.01},
  {69.63,137.46},{30.90,92.46},{54.24,103.71},{82.12,149.86},
  {57.43,119.86},{16.83,61.60},{38.45,74.99},{ 9.38,60.12},
  {18.91,53.31},{65.28,115.98},{52.45,119.66},{ 4.88,52.30},
  {49.92,95.81},{60.44,126.35},{25.07,83.25},{58.21,108.57},
  {28.81,94.01},{44.94,99.55},{35.75,79.36},{95.26,164.51},
  {35.14,113.38},{ 6.95,51.77},{37.56,81.49},{27.79,72.55},
  {68.04,129.74},{19.46,82.90},{13.49,40.02},{40.81,92.01},
  {44.13,86.46},{90.16,178.62},{82.34,153.55},{92.32,165.64},
  {78.20,166.78},{24.76,66.00},{91.00,175.56},{85.94,172.81},
  {98.74,178.91},{ 7.47,34.02},{37.28,85.95},{ 8.94,54.67},
  {31.78,85.85},{31.71,82.87},{44.29,96.83},{21.85,68.96},
  {15.20,48.69},{ 9.51,58.55},{14.53,53.46},{87.25,166.09},
  {35.25,79.77},{45.43,106.79},{16.24,69.34},{61.36,142.83},
  {99.33,176.18},{ 2.66,42.92},{42.69,105.85},{69.04,124.32},
  {62.77,125.38},{87.76,149.94},{68.38,124.70},{44.95,109.62},
  { 8.36,63.51},{29.47,75.02},{42.49,87.92},{29.05,95.14},
  { 1.36,43.70},{60.36,102.16},{23.57,54.88},{30.84,80.74},
  {10.19,42.03},{97.59,177.44},{36.08,89.31},{21.74,45.86},
  {58.56,113.61},{34.10,92.54},{87.76,174.79},{43.42,107.45},
  {55.01,110.06},{45.87,119.35},{21.24,61.64},{ 0.63,23.13},
  {44.94,99.54},{ 5.22,47.01},{ 1.71,42.19},{92.32,159.09},
  {28.15,76.89},{77.98,128.92},{40.11,84.47},{80.44,144.10},
  {21.62,80.78},{27.18,70.12},{80.83,148.92},{65.54,132.52},
  {69.13,124.43},{26.54,59.95},{ 0.13,36.97},{24.07,70.64},
  {27.58,70.42},{45.07,121.14},{11.82,46.41},{81.39,156.60},
  {49.46,95.96},{56.25,93.87},{92.93,167.21},{85.35,169.34},
  {32.46,93.55},{37.88,93.61},{66.98,144.61},{67.21,133.07},
  {37.90,81.47},{68.35,136.90},{69.28,140.78},{78.26,143.36},
  {28.73,69.02},{48.85,91.09},{ 6.11,61.37},{69.24,156.76},
  {58.32,123.43},{13.23,59.97},{32.85,74.58},{48.15,120.84},
  {74.60,145.21},{46.64,104.61},{63.37,120.76},{13.36,59.46},
  {69.89,142.17},{67.89,136.10},{49.22,99.19},{73.16,143.29},
  {47.79,130.64},{41.71,94.63},{93.46,171.77},{99.74,185.80},
  {58.15,112.90},{24.90,82.06},{17.53,58.51},{34.06,80.58},
  {51.11,115.72},{19.12,64.68},{29.05,80.50},{30.71,91.87},
  {20.00,77.43},{38.82,97.86},{25.56,71.28},{24.69,51.78},
  {15.15,52.31},{89.92,178.26},{97.21,171.26},{54.16,134.74},
  {84.67,149.81},{74.93,123.09},{ 5.26,24.90},{99.04,183.04},
  {89.69,180.72},{ 9.57,59.78},{27.52,86.77},{ 7.79,63.47},
  {86.70,159.99},{12.54,49.44},{65.80,139.16},{60.68,99.45},
  {37.01,99.10},{65.32,128.72},{79.27,139.94},{13.48,59.51},
  {16.15,65.81},{ 5.50,56.27},{21.44,61.06},{17.95,80.39},
  {22.99,69.66},{78.04,139.81},{ 8.19,45.53},{53.04,114.50},
  {22.03,55.53},{71.11,134.99},{12.41,60.57},{47.53,107.37},
  { 0.20,27.63},{ 3.31,26.26},{59.81,132.51},{50.17,104.10},
  {84.25,141.14},{91.89,171.66},{14.95,62.25},{ 9.00,61.06},
  {29.68,75.94},{98.55,169.15},{63.95,127.72},{41.36,82.03},
  {92.20,168.84},{71.55,142.74},{89.17,168.56},{36.19,84.82},
  { 5.83,58.93},{32.71,82.95},{13.63,72.12},{20.78,69.59},
  {96.66,156.89},{40.74,93.92},{12.50,64.55},{91.70,165.65},
  {45.68,89.74},{10.70,52.42},{80.60,159.09},{46.91,99.34},
  {42.30,97.16},{34.03,85.62},{68.84,132.20},{94.47,166.73},
  { 6.57,23.33},{88.09,172.72},{10.29,44.01},{16.28,64.39},
  {40.21,82.53},{42.50,101.48},{85.18,145.73},{88.49,176.79},
  {23.93,69.17},{21.58,71.42},{43.56,101.34},{18.85,72.03},
  { 4.01,20.86},{58.74,130.89},{ 0.55,42.23},{64.01,138.48},
  {86.32,164.34},{ 4.01,62.96},{71.65,145.59},{59.98,128.80},
  {47.29,107.25},{52.80,112.62},{73.48,143.42},{60.71,105.76},
  {14.39,46.36},{91.65,166.65},{68.70,134.37},{17.20,63.05},
  {49.86,111.33},{15.66,66.77},{13.85,55.13},{11.74,62.94},
  {46.11,92.86},{90.43,144.43},{12.80,46.53},{ 8.49,48.78},
  {92.34,176.52},{77.18,145.53},{18.95,72.13},{25.16,77.45},
  {79.17,156.72},{94.54,168.51},{12.56,52.73},{31.32,80.71},
  {83.67,145.98},{69.02,141.65},{16.67,51.28},{43.22,108.69},
  { 2.77,44.28},{28.19,92.70},{85.57,161.86},{16.23,62.41},
  { 7.59,70.56},{36.61,85.26},{31.17,83.60},{77.49,151.10},
  {12.82,38.79},{30.11,81.59},{50.07,122.10},{74.50,144.63},
  {94.48,175.21},{82.49,146.39},{47.18,90.69},{19.81,68.22},
  {67.87,135.07},{86.53,158.63},{ 4.02,67.70},{79.22,163.68},
  {18.63,65.68},{93.39,170.96},{95.97,163.34},{75.47,121.35},
  { 0.78,37.11},{ 9.53,50.40},{39.13,110.03},{95.69,168.67},
  {27.61,84.96},{47.10,120.52},{96.66,178.29},{88.15,179.79},
  {54.08,127.28},{98.67,173.36},{28.33,79.71},{ 3.98,31.32},
  {98.84,179.12},{22.71,70.55},{ 2.25,35.21},{32.51,72.10},
  {61.33,121.66},{70.04,137.97},{47.57,129.83},{15.27,63.70},
  {67.47,148.68},{90.29,162.66},{ 5.58,56.85},{26.24,75.05},
  {97.20,190.42},{97.93,174.98},{72.40,139.24},{36.57,100.59},
  { 9.55,69.48},{28.55,80.48},{23.97,69.20},{40.40,94.65},
  {93.43,169.59},{56.99,101.50},{29.82,78.34},{63.85,105.18},
  {36.57,93.67},{29.99,100.46},{48.09,99.60},{17.13,85.66},
  {42.67,102.26},{26.34,76.52},{ 9.81,48.84},{35.70,76.14},
  {89.40,153.75},{97.80,177.01},{27.89,69.25},{46.43,113.97},
  {21.64,62.84},{72.79,131.04},{86.23,150.89},{57.53,122.30},
  {36.87,91.32},{13.15,50.63},{81.13,165.31},{29.36,108.50},
  {25.65,81.54},{21.91,58.02},{60.06,128.34},{53.90,116.97},
  {37.20,91.22},{ 2.75,54.02},{78.84,143.43},{78.42,129.08},
  {30.30,91.45},{ 6.19,51.64},{15.94,75.49},{49.50,107.77},
  {48.58,103.97},{42.05,114.46},{98.55,169.49},{23.59,77.96},
  { 4.95,31.04},{51.61,122.22},{89.57,166.43},{97.29,183.00},
  {67.36,143.50},{70.70,143.79},{ 7.09,61.57},{ 4.55,35.73},
  { 3.12,26.08},{27.61,71.71},{17.87,65.37},{73.82,148.35},
  {71.86,152.17},{39.75,97.64},{11.52,51.38},{84.82,150.22},
  {33.13,77.12},{34.83,83.95},{53.84,105.93},{85.86,161.20},
  {80.36,135.81},{29.48,66.91},{33.44,84.75},{27.94,89.60},
  {61.89,130.52},{15.65,50.50},{66.84,126.11},{61.89,124.02},
  {30.64,82.56},{63.67,113.67},{93.79,175.50},{89.78,180.21},
  {49.60,106.06},{78.60,152.09},{88.82,171.67},{ 4.49,41.76},
  {12.41,62.47},{57.54,122.63},{42.00,96.54},{15.89,62.16},
  {18.09,43.62},{98.19,177.35},{49.84,105.13},{59.38,128.63},
  {55.34,118.20},{60.21,125.47},{31.34,69.51},{79.20,139.77},
  {26.37,81.64},{45.32,72.27},{91.13,173.22},{91.36,169.43},
  {65.10,128.76},{24.33,59.90},{39.37,93.39},{88.88,156.65},
  {66.86,146.50},{73.40,126.02},{14.09,64.93},{87.34,173.83},
  {18.26,68.89},{92.26,160.92},{77.91,157.56},{52.89,98.98},
  {38.14,109.31},{41.50,96.53},{26.81,89.59},{47.42,103.41},
  {68.58,132.42},{60.29,126.09},{64.99,125.45},{76.35,144.33},
  {11.69,57.61},{28.16,72.44},{23.94,72.18},{95.67,182.61},
  {59.17,118.32},{35.19,83.30},{19.53,74.53},{45.16,96.72},
  {66.63,128.79},{96.13,182.09},{65.31,126.98},{33.27,102.77},
  { 3.65,39.52},{19.26,74.36},{32.61,70.26},{37.77,82.99},
  { 1.77,32.37},{87.50,167.27},{90.60,158.93},{86.81,154.12},
  {23.83,77.55},{97.47,166.55},{83.99,167.80},{44.51,104.49},
  {86.46,168.85},{75.17,142.50},{83.71,173.31},{92.83,162.93}
};

double residual_error(double x, double y, double m, double c) {
  double e = (m * x) + c - y;
  return e * e;
}

__device__ double d_residual_error(double x, double y, double m, double c) {
  double e = (m * x) + c - y;
  return e * e;
}

double rms_error(double m, double c) {
  int i;
  double mean;
  double error_sum = 0;
  
  for(i=0; i<n_data; i++) {
    error_sum += residual_error(data[i].x, data[i].y, m, c);
  }
  
  mean = error_sum / n_data;
  
  return sqrt(mean);
}

__global__ void d_rms_error(double *m, double *c, double *error_sum_arr, point_t *d_data) {

	int i = threadIdx.x + blockIdx.x * blockDim.x;

  error_sum_arr[i] = d_residual_error(d_data[i].x, d_data[i].y, *m, *c);
}

int time_difference(struct timespec *start, struct timespec *finish, 
                              long long int *difference) {
  long long int ds =  finish->tv_sec - start->tv_sec; 
  long long int dn =  finish->tv_nsec - start->tv_nsec; 

  if(dn < 0 ) {
    ds--;
    dn += 1000000000; 
  } 
  *difference = ds * 1000000000 + dn;
  return !(*difference > 0);
}

int main() {
  int i;
  double bm = 1.3;
  double bc = 10;
  double be;
  double dm[8];
  double dc[8];
  double e[8];
  double step = 0.01;
  double best_error = 999999999;
  int best_error_i;
  int minimum_found = 0;
  
  double om[] = {0,1,1, 1, 0,-1,-1,-1};
  double oc[] = {1,1,0,-1,-1,-1, 0, 1};

	struct timespec start, finish;   
  long long int time_elapsed;

	
  clock_gettime(CLOCK_MONOTONIC, &start);

	cudaError_t error;

	
  double *d_dm;
  double *d_dc;
	double *d_error_sum_arr;
	point_t *d_data;
	
  be = rms_error(bm, bc);

	
	error = cudaMalloc(&d_dm, (sizeof(double) * 8));
 	if(error){
   	fprintf(stderr, "cudaMalloc on d_dm returned %d %s\n", error,
    	cudaGetErrorString(error));
   	exit(1);
 	}
	
	
	error = cudaMalloc(&d_dc, (sizeof(double) * 8));
 	if(error){
   	fprintf(stderr, "cudaMalloc on d_dc returned %d %s\n", error,
  	  cudaGetErrorString(error));
   	exit(1);
 	}
	
	
	error = cudaMalloc(&d_error_sum_arr, (sizeof(double) * 1000));
 	if(error){
   	fprintf(stderr, "cudaMalloc on d_error_sum_arr returned %d %s\n", error,
   	  cudaGetErrorString(error));
   	exit(1);
 	}

	
	error = cudaMalloc(&d_data, sizeof(data));
 	if(error){
   	fprintf(stderr, "cudaMalloc on d_data returned %d %s\n", error,
   	  cudaGetErrorString(error));
   	exit(1);
 	}

  while(!minimum_found) {
    for(i=0;i<8;i++) {
      dm[i] = bm + (om[i] * step);
      dc[i] = bc + (oc[i] * step);    
    }

		
  	error = cudaMemcpy(d_dm, dm, (sizeof(double) * 8), cudaMemcpyHostToDevice);  
  	if(error){
    	fprintf(stderr, "cudaMemcpy to d_dm returned %d %s\n", error,
      cudaGetErrorString(error));
  	}

		
  	error = cudaMemcpy(d_dc, dc, (sizeof(double) * 8), cudaMemcpyHostToDevice);  
  	if(error){
    	fprintf(stderr, "cudaMemcpy to d_dc returned %d %s\n", error,
      cudaGetErrorString(error));
  	}

		
  	error = cudaMemcpy(d_data, data, sizeof(data), cudaMemcpyHostToDevice);  
  	if(error){
    	fprintf(stderr, "cudaMemcpy to d_data returned %d %s\n", error,
      cudaGetErrorString(error));
  	}
		
    for(i=0;i<8;i++) {
			
			double h_error_sum_arr[1000];
			double error_sum_total;
			double error_sum_mean;
			d_rms_error <<<100,10>>>(&d_dm[i], &d_dc[i], d_error_sum_arr, d_data);
			cudaThreadSynchronize();
		  error = cudaMemcpy(&h_error_sum_arr, d_error_sum_arr, (sizeof(double) * 1000), cudaMemcpyDeviceToHost);  
		  if(error){
	    fprintf(stderr, "cudaMemcpy to error_sum returned %d %s\n", error,
	      cudaGetErrorString(error));
		  }
			for(int j=0; j<n_data; j++) {
    		error_sum_total += h_error_sum_arr[j];
  		}

			error_sum_mean = error_sum_total / n_data;
			e[i] = sqrt(error_sum_mean);

      if(e[i] < best_error) {
        best_error = e[i];
        best_error_i = i;
      }

			error_sum_total = 0;
    }


    if(best_error < be) {
      be = best_error;
      bm = dm[best_error_i];
      bc = dc[best_error_i];
    } else {
      minimum_found = 1;
    }
  }

	error = cudaFree(d_dm);
	if(error){
		fprintf(stderr, "cudaFree on d_dm returned %d %s\n", error,
	  	cudaGetErrorString(error));
		exit(1);
	}
	
	error = cudaFree(d_dc);
	if(error){
		fprintf(stderr, "cudaFree on d_dc returned %d %s\n", error,
			cudaGetErrorString(error));
		exit(1);
	}

	error = cudaFree(d_data);
	if(error){
		fprintf(stderr, "cudaFree on d_data returned %d %s\n", error,
	  	cudaGetErrorString(error));
	 	exit(1);
	}
		
	error = cudaFree(d_error_sum_arr);
	if(error){
		fprintf(stderr, "cudaFree on d_error_sum_arr returned %d %s\n", error,
	  	cudaGetErrorString(error));
	 	exit(1);
	}

  printf("minimum m,c is %lf,%lf with error %lf\n", bm, bc, be);

	clock_gettime(CLOCK_MONOTONIC, &finish);

  time_difference(&start, &finish, &time_elapsed);

  printf("Time elapsed was %lldns or %0.9lfs\n", time_elapsed, 
         (time_elapsed/1.0e9));
	
  return 0;
}
